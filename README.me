# 🧩 Web Forum Project

A web-based discussion platform built using Go and SQLite. This forum allows users to create and engage in conversations via posts and comments, interact through likes and dislikes, and filter content by categories and user-specific data. The entire application is containerized using Docker.

---

## 📌 Objectives

This project consists of building a functional web forum with the following core features:

- User communication via **posts and comments**
- Categorization of posts
- Interaction through **likes and dislikes** (posts and comments)
- **Filtering** posts by category, user-created, and liked content
- Full authentication system using cookies and session management
- Secure password storage (bonus: hashed using bcrypt)
- Deployment using **Docker**

---

## 🗃️ Technologies Used

- **Language**: Go (Golang)
- **Database**: SQLite
- **Security**: bcrypt (for password hashing)
- **Session Management**: HTTP cookies
- **UUID Management**: `gofrs/uuid` or `google/uuid` (optional bonus)
- **Containerization**: Docker
- **Frontend**: Plain HTML/CSS (no JS frameworks)

---

## 🧠 Features

### ✅ Authentication

- User **registration** and **login**
- Email, username, and password validation
- Encrypted password storage (bonus)
- Session-based login with **cookie expiration**
- Prevent duplicate sessions per user

### ✅ Posts and Comments

- Only **authenticated users** can create posts/comments
- Posts can be assigned to one or more **categories**
- Comments are attached to posts
- All posts/comments visible to **all users**, even unauthenticated ones

### ✅ Likes and Dislikes

- Registered users can **like/dislike** posts and comments
- Likes/dislikes count is **publicly visible**

### ✅ Filters

- **Filter by categories** (acts as subforums)
- **Filter by user’s posts**
- **Filter by liked posts**
- Last two filters available only for **logged-in users**

### ✅ SQLite Integration

- Store and manage users, sessions, posts, comments, and categories
- Must include usage of:
  - `CREATE` queries
  - `INSERT` queries
  - `SELECT` queries

### ✅ Docker

- The entire application is **containerized**
- Docker used for running the Go web server and the database
- Dockerfile and `docker-compose.yml` provided

---

## ⚙️ Setup Instructions

### 1. Clone the Repository

```bash
git clone https://github.com/MedSaher/forum.git
cd forum
